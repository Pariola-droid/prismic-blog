# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
node_modules
/.pnp
.pnp.js

# IDE
.vscode
/.idea/

# testing
/coverage

# production
build

# misc
.DS_Store
.env*
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*
.yalc/
yalc.lock

# docker
docker-compose.*.override.yml
docker-compose.override.yml

#coverage
coverage

# local env files
.env*.local

# vercel
.vercel

## Ignore terraform generated files
**/.terraform/*

# .tfstate files
terraform/*.tfstate
terraform/*.tfstate.*

# Crash log files
terraform/crash.log

# Ignore any .tfvars files that are generated automatically for each Terraform run. Most
# .tfvars files are managed as part of configuration and so should be included in
# version control.
#
# example.tfvars

# Ignore override files as they are usually used to override resources locally and so
# are not checked in
terraform/override.tf
terraform/override.tf.json
terraform/*_override.tf
terraform/*_override.tf.json
terraform/secret.json

# Include override files you do wish to add to version control using negated pattern
#
# !example_override.tf

# Include tfplan files to ignore the plan output of command: terraform plan -out=tfplan
# example: *tfplan*

# Ignore CLI configuration files
.terraformrc
terraform.rc

terraform/.terraform.lock.hcl

#Others
.DS_STORE
*.txt
*.out
.env

# typescript
*.tsbuildinfo
next-env.d.ts

# vscode configs
.vscode

.idea

# next.js
/.next/
/out/
